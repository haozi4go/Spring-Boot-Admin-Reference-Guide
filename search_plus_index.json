{"./":{"url":"./","title":"指南","keywords":"","body":"Spring-Boot-Admin-Reference-Guide(中文版) 目前只针对2.x版本英文版请参考http://codecentric.github.io/spring-boot-admin/2.0.4/ 源文档信息:Johannes Edmeier @joshiste Version 2.0.4,19.10.2018 "},"1.what-is-spring-boot-admin.html":{"url":"1.what-is-spring-boot-admin.html","title":"1. Spring Boot Admin是什么","keywords":"","body":"codecentric的Spring Boot Admin是管理和监控你的Spring Boot应用的社区项目。应用程序可以使用Spring Boot Admin Client(通过HTTP)注册，或是通过Spring Cloud(Eureka、Consul等)进行服务发现。UI只是一个挂在Spring Boot Actuator上的一个AngularJs应用程序。 "},"2.getting-started.html":{"url":"2.getting-started.html","title":"2. 开始","keywords":"","body":"设置Spring Boot Admin Server 首先要设置你的服务端。为此可以（通过start.spring.io）生成一个简单的boot项目。由于Spring Boot Admin Server可作为servlet或者webflux应用运行，所以需要增加相应的Spring Boot Starter。在本示例中使用servlet web starter。1.在依赖中增加Spring Boot Admin Server starterpom.xml de.codecentric spring-boot-admin-starter-server 2.0.4 org.springframework.boot spring-boot-starter-web 2.使用@EnableAdminServer开启Spring Boot Admin Server配置 @Configuration @EnableAutoConfiguration @EnableAdminServer public class SpringBootAdminApplication { public static void main(String[] args) { SpringApplication.run(SpringBootAdminApplication.class, args); } } 也可参见spring-boot-admin-sample-servlet项目为给程序加密。 注册客户端应用 注册应用到SBA服务端，可使用SBA客户端或者使用Spring Cloud Discovery(Eureka、Consul等)。在SBA服务端使用静态配置是个简单的选择。 Spring Boot Admin 客户端 每个要注册的应用必须有Spring Boot Admin客户端。为了保证站点安全也可增加spring-boot-starter-security。 1.增加spring-boot-admin-starter-client依赖pom.xml de.codecentric spring-boot-admin-starter-client 2.0.4 org.springframework.boot spring-boot-starter-security 2.通过配置Spring Boot Admin服务端的URL来开启SBA客户端application.properties spring.boot.admin.client.url=http://localhost:8080 ❶ management.endpoints.web.exposure.include=* ❷ ❶ Spring Boot Admin服务端注册的URL❷ 由于大部分端口Spring Boot 2是默认不开启的，需要手动全部开启。在生产环境中需要慎重开放这些端口。 3.开启actuator端点： @Configuration public static class SecurityPermitAllConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().anyRequest().permitAll() ❶ .and().csrf().disable(); } } ❶ 为了简洁暂时先关闭加密。可查看security section开启加密端点。 Spring Cloud Discovery 如果应用程序中已经使用了Spring Cloud Discovery则不必使用SBA客户端。只要在Spring Boot Admin服务端增加DiscoveryClient即可，其他设置将自动配置。下面的步骤使用Eureka，但其他的Spring Cloud Discovery也是支持的。下面是的Consul和Zookeeper例子。1.增加spring-cloud-starter-eureka依赖pom.xml org.springframework.cloud spring-cloud-starter-netflix-eureka-client 2.增加@EnableDiscoveryClient开启服务发现 @Configuration @EnableAutoConfiguration @EnableDiscoveryClient @EnableAdminServer public class SpringBootAdminApplication { public static void main(String[] args) { SpringApplication.run(SpringBootAdminApplication.class, args); } @Configuration public static class SecurityPermitAllConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().anyRequest().permitAll() ❶ .and().csrf().disable(); } } } ❶ 为了简洁暂时先关闭加密。可查看security section开启加密端点。3.配置服务发现客户侧的配置application.yml eureka: ❶ instance: leaseRenewalIntervalInSeconds: 10 health-check-url-path: /actuator/health metadata-map: startup: ${random.int} #needed to trigger info and endpoint update after restart client: registryFetchIntervalSeconds: 5 serviceUrl: defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/ management: endpoints: web: exposure: include: \"*\" ❷ endpoint: health: show-details: ALWAYS ❶ Eureka 客户端配置❷ 由于大部分端口Spring Boot 2是默认不开启的，需要手动全部开启。在生产环境中需要慎重开放这些端口。 "},"3.client-applications.html":{"url":"3.client-applications.html","title":"3. 客户端应用","keywords":"","body":"在应用程序列表中显示版本 对于Spring Boot应用来说很容易显示版本信息，在spring-boot-maven-plugin中使用build-infogoal来生成META-INF/build-info.properties。请参见Spring Boot Reference Guide。对于非Spring Boot应用也可以增加version或者build.version到注册元数据中来在应用列表中显示版本。pom.xml org.springframework.boot spring-boot-maven-plugin build-info JMX-bean 管理 为了在管理界面上管理JMX-beans，必须在应用程序中引入Jolokia 。 由于Jolokia是基于servlet的，所以不支持响应式程序。如果使用spring-boot-admin-starter-client 则已经自带了Jolokia，如果没有使用则需要添加下面依赖：pom.xml org.jolokia jolokia-core 日志文件查看器 默认情况日志在actuator端点是不可访问的，所以在Spring Boot Admin也是不可见的。为了开启日志监控端点，需配置logging.path或logging.file开启日志。Spring Boot Admin将监控所有类似URL的并展示为超链接。也可以配置自定义日志格式来支持ANSI color-escapes（Spring Boot默认不开启）。application.properties logging.file=/var/log/sample-boot-application.log ❶ logging.pattern.file=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx ❷ ❶ 写日志目标文件。开启日志监控端点。 ❷ 日志开启ANSI colors。 显示每个实例的标签 Tags是为每个实例添加可视标记一种方式，一般出现在应用列表和实例详情中。默认情况实例是没有Tag的，需要客户端将期望的tags添加到元数据或info端点。application.properties #使用元数据 spring.boot.admin.client.instance.metadata.tags.environment=test #使用info端点 info.tags.environment=test Spring Boot Admin客户端 Spring Boot Admin客户端会通过HTTP post请求将应用的信息注册到admin服务端。这需要添加Jolokia到应用中，以便JMX-beans可以通过HTTP访问。表1Spring Boot Admin客户端配置项 属性名 描述 默认值 spring.boot.admin.client.enabled 开启Spring Boot Admin客户端 true spring.boot.admin.client.url Spring Boot Admin服务端注册URL，多个用逗号分隔，此配置会触发自动配置，必须配置。 spring.boot.admin.client.api-path admin服务端注册端点管理HTTP路径 \"instances\" spring.boot.admin.client.username spring.boot.admin.client.password SBA服务API基于HTTP Basic认证的用户名和密码 spring.boot.admin.client.period 注册时间间隔（单位：毫秒） 10,000 spring.boot.admin.client.connect-timeout 注册连接超时时间（单位：毫秒） 5,000 spring.boot.admin.client.read-timeout 注册读取超时时间（单位：毫秒） 5,000 spring.boot.admin.client.auto-registration 如果设为true，则周期性注册应用 true spring.boot.admin.client.auto-deregistration 当关闭上下文，SpringBoot Admin将开启auto-deregistration。CloudPlatform中默认激活该配置 null spring.boot.admin.client.register-once 如果设为true客户端将只注册一次到admin服务端（为了定义spring.boot.admin.instance.ur）；如果admin服务端宕机，则自动注册到另外一台admin服务上。如果设为false，则注册到所有admin服务上。 true spring.boot.admin.client.instance.health-url 注册使用的健康检查URL。可访问URL变化的情况可以重写该值。在注册中必须唯一。 由管理URl和endpoints.health.id组成 spring.boot.admin.client.instance.management-base-url spring.boot.admin.client.instance.management-url spring.boot.admin.client.instance.service-base-url spring.boot.admin.client.instance.service-url spring.boot.admin.client.instance.name spring.boot.admin.client.instance.prefer-ip spring.boot.admin.client.instance.metadata.* spring.boot.admin.client.instance.metadata.tags.* 表1 实例元数据 键 值 默认值 user.name user.password 访问端点的凭证 "},"4.spring-boot-admin-server.html":{"url":"4.spring-boot-admin-server.html","title":"4. Spring Boot Admin服务端","keywords":"","body":""},"5.security.html":{"url":"5.security.html","title":"5. 安全","keywords":"","body":""},"6.customizing.html":{"url":"6.customizing.html","title":"6. 定制化","keywords":"","body":""},"7.monitoring-spring-boot-1.5.x.html":{"url":"7.monitoring-spring-boot-1.5.x.html","title":"7. 监控Spring Boot1.5.x应用","keywords":"","body":""},"8.changes-with-2.x.html":{"url":"8.changes-with-2.x.html","title":"8. v2.x的更新","keywords":"","body":""},"9.faqs.html":{"url":"9.faqs.html","title":"9. 常见问题","keywords":"","body":""}}